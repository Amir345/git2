Introduction to Docker

Docker is a virtualization technology wherein your apps binaries and libraries and their dependencies are combined together in a container and can be shipped to run on different machines.

To run containers you don't have to allocate any RAM as compared to traditional VM

Docker is gaining popularity specially with complex application structure wherein 

Complex application is broken down into smaller segments generally referred to as microservices and then these micro services can be coded in forms of containers

containers are lightweight and uses the host OS (kernel).

These containers use containarization to be enabled on the host os whic is not native to the host OS

Hence a software is needed and docker solves the purpose over here

Docker is one such tool that truly lives up to its promise of Build, Ship and Run.


For example: Lets consider a linux based application which has been written both in Ruby and Python. This application requires a specific version of linux, Ruby and Python. In order to avoid any version conflicts on user’s end, a linux docker container can be  created with the required versions of Ruby and Python installed along with the application. Now the end users can use the application easily by running this container without worrying about the dependencies or any version conflicts. 


Containerization is the technique of bringing virtualization to the operating system level. While Virtualization brings abstraction to the hardware, Containerization brings abstraction to the operating system.

Containers run in an isolation environment so that essentially means that they do not interfer with one another while they run however containers are easy to integrate.

Containers only contain application specific libraries which are separate for each container and they are faster and do not waste any resources.

While Virtualization brings abstraction to the hardware, containeraziation brings abstraction to the OS

binaries and libraries are on the host kernel which makes booting time faster for containers as compared to VM









