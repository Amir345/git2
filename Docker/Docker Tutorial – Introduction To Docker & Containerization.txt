Introduction to Docker

Docker is a virtualization technology wherein your apps binaries and libraries and their dependencies are combined together in a container and can be shipped to run on different machines.

To run containers you don't have to allocate any RAM as compared to traditional VM

Docker is gaining popularity specially with complex application structure wherein 

Complex application is broken down into smaller segments generally referred to as microservices and then these micro services can be coded in forms of containers

containers are lightweight and uses the host OS (kernel).

These containers use containarization to be enabled on the host os whic is not native to the host OS

Hence a software is needed and docker solves the purpose over here

Docker is one such tool that truly lives up to its promise of Build, Ship and Run.


For example: Lets consider a linux based application which has been written both in Ruby and Python. This application requires a specific version of linux, Ruby and Python. In order to avoid any version conflicts on user’s end, a linux docker container can be  created with the required versions of Ruby and Python installed along with the application. Now the end users can use the application easily by running this container without worrying about the dependencies or any version conflicts. 


Containerization is the technique of bringing virtualization to the operating system level. While Virtualization brings abstraction to the hardware, Containerization brings abstraction to the operating system.

Containers run in an isolation environment so that essentially means that they do not interfer with one another while they run however containers are easy to integrate.

Containers only contain application specific libraries which are separate for each container and they are faster and do not waste any resources.

While Virtualization brings abstraction to the hardware, containeraziation brings abstraction to the OS

binaries and libraries are on the host kernel which makes booting time faster for containers as compared to VM


******************************************************************************************************************************************************************************

Docker is a containerazation platform which packages your application code with it's dependencies together in the form of containers which have process level isolation

This also ensures that the working computing environment remains the same across all the stages in SDLC

Docker engine is the heart of docker it works like a client server architecture

which uses a server which is a type of long running program called a daemon process and the command line interface is the client

client interacts with the server through REST API with a combination of socket Io and the TCP/IP.

In a linux OS docker client is accessed via the terminal and the docker host which runs the docker daemon

We build our docker images and run our docker containers by passing command from CLI to the docker daemon

In Windows/MAC there is additional docker toolbox component inside the docker host

this docker toolbox helps in setting up the docker environment on windows or mac system

Docker toolbox installs docker client, compose (MAC Only), kitematic, virtual box and machine


Docker daemon takes care of images and containers


******************************************************************************************************************************************************************************

Docker Images and containers

Images :- can be related to the exe file and these are the building blocks for docker containers

Images are built by docker file using the build command on it

These are read only template and is used to create containers using the run command

containers :- These are instances of images and these are ready applications that are created using the images

containers hold the entire package that is needed to run the application and it is an isolated application platform


**************************************************************************************

Docker registery :- It's the repo where you save your docker images

repo can be public or private (Local to your machine), docker hub is docker very own cloud repo similar to github

******************************************************************************************************************************************************************************

commands for docker

Pull an image

# docker pull <image:tag> tag specifies the version of the image

or
# docker pull <image id>

Run an image

# docker run <image:tag>
or
# docker run <image id>

List all docker images

# docker images

List all running containers

# docker ps

List all container including the one that has been stopped

# docker ps -a

**************************************************************************************

How to build docker images

docker uses UFS and hence images are built in layers.

Images are comprised of multiple layers

each layer is an image of its own, they comprise of a base image layer which is read only

Any changes that are made to an image are saved as layers on top of the base image layer

Containers are generated by running the image layers that are stacked one above the other

*************************************


To build an image we have a docker file

Docker file is used to install the application and build new images

Docker file contains instructions to build docker image

Docker file contains various keywords like "from, run, "

From indicates the base image from which the container is to be built and run indicates the command that is to be run on that image

Command to build image

#docker build -t <image_name:tag>

In order to run the image we have to use
# docker run -it <imageid>

EXPOSE is used to expose the port # for the container

COPY is used to copy the file

CMD command specifies the entry point in the docker file for a container

*************************************

# docker stop  <container id>is used to stop a running container

# docker rm <container-id> is used to delete a stopped container

You cannot delete a running container

# docker rmi <image-id> is used to remove the docker image

Make sure that the image is not being used by any running or stopped container































